import os
import pdb
import shutil
import intermol.unit as units
from collections import OrderedDict

def standardize_key(in_key):
    out_key = in_key
    # terms from header line
    if in_key == 'en':
        out_key = 'Raw Potential'
    if in_key == 'E_p':
        out_key = 'Potential'
    if in_key == 'E_k':
        out_key = 'Kinetic En.'
    if in_key == 'E_x':
        out_key = 'Extended En.'

    # terms from (0.000000) lines
    if in_key == 'stretch':
        out_key = 'Bond'
    if in_key == 'angle':
        out_key = 'Angle'
    if in_key == 'dihedral':
        out_key = 'All dihedrals'
    if in_key == 'pair_vdw':
        out_key = 'LJ-14'
    if in_key == 'pair_elec':
        out_key = 'Coulomb-14'
    if in_key == 'Kinetic':
        out_key = '' # already included by header line
    if in_key == 'Total': # refers to total potential
        out_key = '' # already included by header line
    if in_key == 'Self_Energy':
        out_key = '' # not sure how it is different from Corr_Energy
    return out_key

def get_desmond_energy_from_file(energy_file):
    ''' 
    parses the desmond energy file
    '''
    with open(energy_file, 'r') as f:
        data = []
        types = []

        # first line of enegrp.dat file contains total energy terms
        line = f.readline() 
        if line.startswith('time=0.000000'): # just to make sure the line is what we think it is
            terms = line.split()
            terms = terms[1:-2] # don't want time, pressure, or volume
            for term in terms:
                key, value = term.split('=')
                types.append(standardize_key(key))
                data.append(float(value))

        # parse rest of file for individual energy grouops
        for line in f:
            if '(0.000000)' in line: # time 0
                words = line.split()
                if words[-1] == 'total':
                    continue
                key = standardize_key(words[0])
                if key:
                    types.append(key)
                    data.append(words[-1])
    data = [float(value) * units.kilocalories_per_mole for value in data]
    e_out = OrderedDict(zip(types, data))
    return e_out

def desmond_energies(cms, cfg, despath):
    """
    Evalutes energies of DESMOND files
    Args:
        cms = cms file
        cfg = cfg file
        despath = path to DESMOND binaries

    """
    cms = os.path.abspath(cms)
    cfg = os.path.abspath(cfg)
    direc, cms_filename = os.path.split(cms)
    cwd = os.getcwd()
    name = os.path.splitext(cms_filename)[0]
    energy_file = '%s/%s.enegrp.dat' % (direc, name)
    if not despath == '':
        desmond_bin = os.path.join(despath,'desmond')
    else:
        desmond_bin = os.path.join(os.environ.get('SCHRODINGER'),'desmond')

    # first see if the file already exists
#    if os.path.exists(energy_file):
#        print '%s already exists, not running DESMOND' % energy_file
#        tot_energy = get_desmond_energy_from_file(energy_file)
#        return tot_energy, energy_file

    # use DESMOND To evaluate energy
    #    cd to directory of cms file so that files generated by desmond
    #    don't clog the working directory
    os.chdir(direc)   
    if os.path.exists('trj'):
        shutil.rmtree('trj')
    cmd = '{desmond_bin} -WAIT -P 1 -in {cms} -JOBNAME {name} -c {cfg}'.format(desmond_bin=desmond_bin, name=name, cms=cms, cfg=cfg)
    print 'Running DESMOND with command'
    print cmd
    exit = os.system(cmd)
    if exit: # exit status not 0
        os.chdir(cwd)
        raise Exception('Failed evaluating energy of {0}'.format(cms))
    
    # parse desmond energy file
    os.chdir(cwd)
    tot_energy = get_desmond_energy_from_file(energy_file)
    return tot_energy, energy_file



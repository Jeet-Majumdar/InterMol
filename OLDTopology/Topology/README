Some progress on coding a Topology object
Vincent Voelz
May 31, 2010

A brief description

mmtools/Topology:
    Topology.py
    Force.py
    GromacsTopology.py
    GromacsParameter.py

Topology.py  is a container class for mutliple TopologySystem.py objects.

TopologySystem.py is based *heavily* on John Chodera's pure Python pyopenmm.py code, which is in turn based heavily on Chris Bruns' SimTK PyOpenMM code.
    * Unlike PyOpenMM's System.py, extra metadata information is stored in TopologySystem.py: Atom names, Atom types, along with functions to query and manipulate them.
    * The particles and constraints are defined directly by the TopologySystem object, while forces are defined by objects that extend the Force class.  After creating a
        System, call addParticle() once for each particle, addConstraint() for each constraint, and addForce() for each Force.

GromacsTopology.py is a derived class of Topology.py, but has a large set of methods and internal classes to read and write *.top files

GromacsParameter.py are like the Force.py container objects, but store information as to force parameters for various combinations of atom types (i.e. forcefield combinations)
    * Unfinished!   These objects need to be carefully and systematically constructed (hopefully a job for MRS's students?), one for each kind of possible potential type 


REQUIREMENTS

* The SimTK python_units package must be installed See: https://simtk.org/home/python_units
* The GMXLIB environment variable must store the path of the Gromacs forcefield files.


Features already implemented in the original pyopenmm-like System.py class

    - merging (and splitting?) multiple topologies
    - generating angles from connectivities
    - generating torsions from connectivities
    - generating 1,4's from connectivities
      *  VAV: Force.NonbondedForce.createExceptionsFromBonds()

    VAV:  THIS IS CONTAINED IN THE Force.NonbondedForceParticleInfo class:
    - nonbonded parameters for all atoms  
       - VdW parameters:
             epsilon (float) (kJ/mol)
             sigma (float)
       - partial charge (float)
       - mass (float)
       
    VAV:  THIS IS CONTAINED IN THE MetadataInfo class:
         - involved in free energy calculations (bool)
         - atom name (string)
         - residue name (string)
  
    VAV:  THIS IS CONTAINED IN THE Force.HarmonicBondForceBondInfo class:
     -list of bonds
         - list of parameters: two possibilities -- just a list that can be interpreted by whatever code we want, or exactly what's in the gromacs records
  
    VAV:  THIS IS CONTAINED IN THE Force.HarmonicAngleForceInfo class:
     -list of angles
         - list of parameters: see above
  
    VAV:  THIS IS CONTAINED IN THE Force.PeriodicTorsionForcePeriodicTorsionInfo class:
     -list of torsions
         - list of parameters: see above
   
    VAV:  THIS IS CONTAINED IN THE Force.NonbondedForceExceptionInfo class:
    -list of 1,4's
         - list of parameters: see above
         
    VAV:  THIS IS implemented via the AtomGroup class:
   - list of groups of atoms
      Groups are lists of atom indices, and a name string.
      
    VAV: THIS IS implemented via self.molecules()
      -can represent either single molecules, or systems of molecules

        Q: Can we allow for arbitrary per-atom data to be added later, such as implicit solvent parameters?
           You can either include this information with each atom, or you could think of including all GB data
           as a separate block of information separate from the nonbonded atom terms.I favor the OpenMM strategy
           of having a separate 'Force' object for each force component, so that NonbondedForce terms
           (charges, LJ sigma and epsilon) and metadata on how these nonbonded interactions are computed is separated
           from, say, a generalized Born section which also may have atomic parameters.  The reason for this is that
           the nonbonded parameters will also need associated with them a list of exclusions or exceptions for those
           interactions where the pairwise combining rule needs to be overridden. -John Chodera 5/26/10 7:47 PM 

        VAV sez: For GB parameters, we can use the GB 'Force' objects provided in Force.py.  Otherwise, you can always add new 
        attributes on the fly to the MetadataInfo() objects 


        Lists of "molecules"?
        
        VAV sez:  One requirement was to store a list of "molecules" or objects (since an object may contain multiple molecules
        in the sense of containing multiple disconnected objects); each containing a list of atoms.  In this case, each "molecule"
        should be a separate Topology instance.  The GromacsTopology (and others, potentially) can serve as containers to store
        multiple "molecules"
        
        
        Combination rules to get vdW parameters for unspecified pairs?
        
        MRS sez:  another desired feature is to track nonbonded parameters for specific pairs of atoms to override the above
        JDC sez:  Agreed.  There needs to be the ability to exclude 1,2 and 1,3 pairs and attenuate 1,4 pairs, at the very least.
                  The simplest way is to just include a list of 'exceptions' for nonbonded interactions. -John Chodera 5/26/10 7:49 PM 
        VAV:  This can be implemented via the Force.NonbondedForceExceptionInfo classes and associated methods.
                
    
Implemented Features?
      
- insert and delete atoms
VAV: TopologySystem.addParticle(self, mass)

- insert and delete connections between atoms
VAV: See Force() objects above

- insert and delete atom groups
VAV:  Not quite there, but TopologySystem.atomgroups and AtomGroups() class are in there, with methods TopologySystem.selectAtomGroup()

- merge and split atom groups
VAV:  Not there 
 -adding/deleting/joining groups.

- methods for selecting atom groups
   - select by residue
   - select by atomic type
   - select by atom number
VAV: see TopologySystem.selectAtomGroup()
   - select by physical location  VAV: NO -- see Discussion on coordinates below

VAV: see  GromacsTopology.py for these:
    - outputting a gromacs top + gro file
    - reading in a topology from a gromacs .itp/.top/.gro
    

 
TO DO
 

- constructing relative free energy topologies given n starting topologies
    VAV:  A job for the MRS lab

- building restraints between atoms
    VAV:  I think this can be done with derived Force classes 

VAV: The following assume that we're storing coords, which we're not doing (at least yet - see discussion below): 
- taking a topology and a pdb/gro/etc. and outputting a new topology with the coordinates from the pdb
- creating a 'blank' topology from a pdb or mol2 file (will this be possible?)

- reset arbitrary key pairs in the input information (i.e., we load in the information once from a template file, and then can edit it keyword by keyword as desired).
    VAV: This sounds more like an *.mdp issue...

- setting up A and B states -- that is, a gromacs topology that has a starting state (A) and an ending state (B). (Sort of implied by the relative free energy mention above)
    VAV:   I thin this can be done with 
    
    
    VAV: A task for MRS's students?
    - select by SMARTS string
     - Hand off the SMARTS string to open eye -- sdf/mol2 file
    

    VAV:  These are NOT implemented yet:  They would require their own derived Topology classes (like GromacsTopology) 
    - reading in a topology from a hetgrpffgen file + pdb (Schrodinger OPLS-AA ?)  VAV: SchrodingerTopology.py ?
    - reading in a topology from Desmond templates(?)  VAV: DesmondTopology.py ?
    - reading in a topology from amber topology files (not necessary yet because of acpypi?) VAV: AmberTopology.py ?

  - Very important:  need to lay out what changes need to be made to other files in MM tools
                   to be able to adapt to the new topology definition:
    
    
    *** DISCUSSION - SHOULD THESE TO BE IMPLEMENTED? *** 

    -location: 3d coordinates: triplet of float (nm).
    -velocities?: triplet of float 
    
    - includes the information necessary for the .gro and the .top in gromacs. ???
    
    - list of dummy atoms and parameters for construction of dummy atoms ???


    *** PURPOSELY NOT IMPLEMENTED ***
    
    MRS wrote:  "important note for free energy calculations:Each atom/angle/torsion should be able to have an arbitrary
                number of parameter sets!  For now, it will usually be one or two.  But eventually, we'd like to be able
                to support more.  So it should be a list of lists.
    
    VAV: This can be done for now using multiple objects with different sets of parms.
     
    JDC says:  "A critical question is how alchemical permutations are to be handled by this topology class.
                Should one topology object contain just a single topology, or should there be multiple sets
                of parameters for part or all of the molecule?  I favor just having *one* set of parameters
                defined, and using transformers that take one or two topology objects with identical ordering
                to generate alchemical transformation input files for gromacs, YANK, etc." -John Chodera 5/27/10 6:14 PM 

    Q: Should we potentially include the runfile information, perhaps as a series of string pairs?
       Translators between formats might come later.
    A: I don't think we want runfile info mixed with the topology object. -David Mobley 5/25/10 5:29 PM 

    



